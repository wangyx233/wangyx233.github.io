{"title":"Hexo","description":null,"language":null,"link":"https://wangyx233.github.io","pubDate":"Wed, 21 Jun 2017 03:37:56 GMT","lastBuildDate":"Mon, 26 Jun 2017 11:12:14 GMT","generator":"hexo-generator-json-feed","webMaster":"Usaki","items":[{"title":"一些设计知识~","link":"https://wangyx233.github.io/2017/06/21/写给大家看的设计书/","description":"最近要看的书好多，全都在排排坐，先挑了一本设计类的书籍《写给大家看的设计书》 设计的四大原则对比对比是为页面增加视觉效果的最有效的途径,也是在不同元素之间建立一种有组织的层次结构最有效方法。要记住一个重要规则:要想实现有效的对比,对比就必须 强烈。千万不要畏畏缩缩。字体的对比，颜色的对比，一定要保持强烈，差别不大的对比没有效果。对比的根本目的有两个,这两个目的相辅相成,无法分开。一个目的是增强页面的效果,如果一个页面看起来很有意思,往往更有可读性。另一个目的是有助于信息的组织。读者应当能立即了解信息以何种方式组织,以及从一项到另一项的逻辑流程。对比元素不能让读者混淆,也不能错误地强调重点(即本不该是重点的元素)。 重复-一致性设计的某些方面需要在整个作品中重复。控制读者视线，设计中视觉元素的重复可以将作品中的各部分连在一起,从而统一并增强整个作品。重复的目的就是统一,并增强视觉效果。不要低估页面视觉效果的威力,如果一个作品看起来很有趣,它往往也更易于阅读。要避免太多地重复一个元素,重复太多会让人讨厌。要注意对比的价值可以通过字体选择、线宽、颜色、形状、大小、空间等来增加对比。 增加对比很容易,途径有很多,这可能是增加视觉效果最有意思也最让人满意的方 法了。重要的是:对比一定要强烈!","pubDate":"Wed, 21 Jun 2017 03:37:56 GMT","guid":"https://wangyx233.github.io/2017/06/21/写给大家看的设计书/","category":""},{"title":"D3.js学习","link":"https://wangyx233.github.io/2017/06/21/D3.js学习/","description":"D3.js实现数据和元素的绑定对于DOM结点的选择，d3.select(‘tag’)选择第一个元素,d3.selectAll(‘tag’)选择所有的元素。对于数据的绑定，tag.datum()将一个数据绑定到元素上，tag.data()将数组内元素分别绑定各元素。 1var body = d3.select(&apos;body&apos;);","pubDate":"Wed, 21 Jun 2017 02:47:53 GMT","guid":"https://wangyx233.github.io/2017/06/21/D3.js学习/","category":""},{"title":"Canvas学习","link":"https://wangyx233.github.io/2017/06/12/Canvas学习/","description":"&lt;canvas&gt;标签定义一个矩形框画布，默认没有边框和内容,默认大小为300像素×150像素(wxh)。 1234&lt;canvas id=&quot;myCanvas&quot; width=&quot;200&quot; height=&quot;100&quot;style=&quot;border:1px solid #000000;&quot;&gt;若浏览器不支持canvas标签，将显示这些文字&lt;/canvas&gt; 在Js文件中绘制Canvas元素。 12345678var c=document.getElementById(&quot;myCanvas&quot;);if(c.getContext(&apos;2d&apos;))&#123; //支持性检查 var ctx=c.getContext(&quot;2d&quot;);//获取渲染上下文，参数为上下文的格式 ctx.fillStyle=&quot;#FF0000&quot;; //填充样式，可为颜色、图案、渐变等。 ctx.fillRect(0,0,150,75);//矩形的填充方法fillRect(x,y,width,height)，矩形左上角坐标为(0,0)&#125;else &#123; // canvas-unsupported code here&#125; 画矩形canvas支持一种原生的图形绘制-矩形 1234fillRect(x, y, width, height) //绘制一个填充的矩形strokeRect(x, y, width, height) //绘制一个矩形的边框clearRect(x, y, width, height) //清除指定矩形区域，让清除部分完全透明rect(x, y, width, height) //绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。","pubDate":"Mon, 12 Jun 2017 05:55:20 GMT","guid":"https://wangyx233.github.io/2017/06/12/Canvas学习/","category":""},{"title":"Three.js学习笔记","link":"https://wangyx233.github.io/2017/06/05/three.js学习指南/","description":"一切都建立在引入Three.js后，得到的全局变量THREE。对于页面中，存放渲染效果的元素，可以是普通的div，也可以是canvas。对于div，渲染时添加节点：1234var renderer = new THREE.WebGLRenderer();renderer.setSize(400, 300);document.getElementById(&apos;test&apos;).appendChild(renderer.domElement);renderer.setClearColor(0x000000);//清除原本所在页面颜色，并设置 而对于定义的canvas标签，其定义及渲染：123&lt;canvas id=&quot;mainCanvas&quot; width=&quot;400px&quot; height=&quot;300px&quot; &gt;&lt;/canvas&gt;var renderer = new THREE.WebGLRenderer(&#123; canvas: document.getElementById(&apos;mainCanvas&apos;)&#125;); 基本概念 主要分为三大部分，场景（scene）、照相机（camera）、渲染器（renderer） 首先定义容器渲染所在的DOM包括宽高、颜色等，利用照相机(投影方式)把作为容器的场景渲染到页面上。 声明渲染器对象renderer，canvas对象的获取方法为renderer.domElement，相机也需要加到场景中去","pubDate":"Mon, 05 Jun 2017 05:59:18 GMT","guid":"https://wangyx233.github.io/2017/06/05/three.js学习指南/","category":"Three.js"},{"title":"优化","link":"https://wangyx233.github.io/2017/05/24/优化/","description":"angular 页码跳转 页面高度，加载 包括scroll，scrollintoview 过滤器进行筛选 ng-repeat 配合ng-class ng-if的使用影响dom节点设置 angular 标签页 用ng-init 修改index dom操作，mouseover，keydown，keyup，keycode flot插件，highcharts插件使用echarts的数据会每次merge，解决方法： (1) setoptions的选项 (2) 每次对数组置空","pubDate":"Wed, 24 May 2017 07:09:55 GMT","guid":"https://wangyx233.github.io/2017/05/24/优化/","category":""},{"title":"问题记录","link":"https://wangyx233.github.io/2017/05/24/问题记录/","description":"性能优化 js压缩 js加载顺序 http缓存 减少请求数 chrome调试工具","pubDate":"Wed, 24 May 2017 07:06:44 GMT","guid":"https://wangyx233.github.io/2017/05/24/问题记录/","category":""},{"title":"hexo部署github的问题","link":"https://wangyx233.github.io/2017/04/11/hexo部署github的问题/","description":"用hexo搭建博客，配置直接部署到github的方法：1.安装 hexo-deployer-git插件1npm install hexo-deployer-git --save 2.在hexo根目录的_config.yml中进行deploy的配置123456deploy: type: git repo: [github repository url] //eg:git@github.com:xxx.git or https://github.com/xxx.git branch: master //branch name message: &quot;Blog updated: &#123;&#123; now（&apos;YYYY-MM-DD&apos;）&#125;&#125;&quot; //commit messagePs:注意缩进和空格 3.通过hexo deploy（即hexo d）命令进行部署，在此之前需要进行hexo generate（即hexo g）编译。123hexo-deployer-git插件的作用是生成.deploy_git文件，并且把hexo g编译后的public中的文件复制到.deploy_git文件夹下，然后进行git操作，推到远端github仓库。 注意：","pubDate":"Tue, 11 Apr 2017 12:03:27 GMT","guid":"https://wangyx233.github.io/2017/04/11/hexo部署github的问题/","category":"hexo,github"},{"title":"Hello World","link":"https://wangyx233.github.io/2017/04/11/hello-world/","description":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server","pubDate":"Tue, 11 Apr 2017 06:06:25 GMT","guid":"https://wangyx233.github.io/2017/04/11/hello-world/","category":""}]}